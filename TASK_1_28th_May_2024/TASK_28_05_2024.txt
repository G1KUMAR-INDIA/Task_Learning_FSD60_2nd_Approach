
1)HTTP/1.1 vs HTTP/2  

	HTTP stands for hypertext transfer protocol, and it is the basis for almost all web applications. 
	More specifically, HTTP is the method computers and servers use to request and send information.
	The first usable version of HTTP was created in 1997. 
	Because it went through several stages of development, this first version of HTTP was called HTTP/1.1. 
	This version is still in use on the web. In 2015, a new version of HTTP called HTTP/2 was created.
	HTTP/2 solves several problems that the creators of HTTP/1.1 did not anticipate. 
	In particular, HTTP/2 is much faster and more efficient than HTTP/1.1.
Multiplexing: 
	HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it. 
	In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource. 
	HTTP/2 does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.

Server push: 
	Typically, a server only serves content to a client device if the client asks for it. 
	However, this approach is not always practical for modern webpages, which often involve several dozen separate resources that the client must request. 
	HTTP/2 solves this problem by allowing a server to "push" content to a client before the client asks for it. 
	The server also sends a message letting the client know what pushed content to expect – like if Bob had sent Alice a Table of Contents of his novel before sending the whole thing.

Header compression: 
	Small files load more quickly than large ones. 
	To speed up web performance, both HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller. 
	However, HTTP/2 uses a more advanced compression method called HPACK that eliminates redundant information in HTTP header packets. 
	This eliminates a few bytes from every HTTP packet. Given the volume of HTTP packets involved in loading even a single webpage, those bytes add up quickly, resulting in faster loading.

Prioritization: 
	Prioritization refers to the order in which pieces of content are loaded. 
	Prioritization affects a webpage's load time. For example, certain resources, like large JavaScript files, may block the rest of the page from loading if they have to load first. 
	More of the page can load at once if these render-blocking resources load last. 
	In HTTP/2, developers have hands-on, detailed control over prioritization. 
	This allows them to maximize perceived and actual page load speed to a degree that was not possible in HTTP/1.1. 
	HTTP/2 offers a feature called weighted prioritization. 
	This allows developers to decide which page resources will load first, every time.

2)Objects are important data types in javascript. 
	Objects are different than primitive datatypes (i.e. number, string, boolean, etc.). 
	Primitive data types contain one value but Objects can hold many values in form of Key: value pair. 
	These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

	Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. 
	These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol) in the sense that while these primitive data-types all store a single value each (depending on their types).

	Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
	An object, is a reference data type. 
	Variables that are assigned a reference value are given a reference or a pointer to that value. 
	That reference or pointer points to the location in memory where the object is stored. 
	The variables don’t actually store the value.

	Ojects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 
	These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

Objects and properties:
	A JavaScript object has properties associated with it. 
	A property of an object can be explained as a variable that is attached to the object. 
	Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. 
	The properties of an object define the characteristics of the object. 
	You access the properties of an object with a simple dot-notation:

objectName.propertyName

	Create JavaScript Object with Object Literal
	One of easiest way to create a javascript object is object literal, simply define the property and values inside curly braces as shown below

	let bike = {name: 'SuperSport', maker:'BMWs1000rr', engine:'999cc'};
	Understanding Objects in JavaScript

	In JavaScript, objects are collections of key-value pairs, where keys are strings (or symbols) and values can be of any data type, including other objects. 
Objects are used to represent real-world entities, data structures, and more complex data types.


	const person = {
	name: "JEEVAN",
	age: 29,
	email: "reddyvarijeevankumar@gmail.com"
	};

Internal Representation of Objects:
	Internally, JavaScript engines use various data structures to represent objects efficiently. 
One common approach is using a hash table or a similar structure to store the object’s properties and their corresponding values. 
This allows for fast access and manipulation of properties.


Internal Representation:
	{
	name: "JEEVAN",
	age: 29,
	email: "reddyvarijeevankumar@gmail.com"
	}

4)IP Address:
	An IP address is a unique numerical label assigned to each device connected to a computer network, such as the internet. 
It acts as a virtual address that allows devices to communicate and identify each other on the network. 
There are two main versions of IP addresses:

	IPv4: 
		The older version, consisting of four sets of numbers between 0 and 255, separated by periods (e.g., 192.168.1.1).

	IPv6: 
		The newer version, with a more complex format using hexadecimal numbers and colons (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334).
Port:
	A port is a virtual communication channel associated with an IP address. 
It allows different applications or services running on the same device to receive and send data independently. 
Imagine an IP address as a building with multiple doors (ports), each leading to a specific apartment (application or service). 
Common port numbers include:

	80: HTTP (web traffic)
	443: HTTPS (secure HTTP)
	21: FTP (file transfer)
	25: SMTP (email)
HTTP Methods:
	HTTP methods are specific commands sent within an HTTP request to instruct the server on how to handle the request. 
These methods define the desired action on the server-side, such as retrieving data, creating new resources, or updating existing ones. 
Some common HTTP methods include:

	GET: Retrieves data from the server, often used for fetching web pages or resources.
	POST: Submits data to the server, typically used for submitting forms or creating new data.
	PUT: Updates existing data on the server.
	DELETE: Removes data from the server.
	PATCH: Applies partial modifications to data on the server.
MAC Address:
	A MAC address (Media Access Control address) is a unique hardware identifier assigned to each network interface card (NIC) in a device. 
It’s used at the data link layer of the OSI model to ensure proper delivery of data frames within a local network segment. 
Unlike IP addresses, which can be dynamic and change, MAC addresses are typically burned into the hardware and remain static.

Relationships between these concepts:

IP address and port: 
	Together, they uniquely identify a specific application or service running on a device on the network.
IP address and MAC address: 
	An IP address is assigned to a logical network interface, while a MAC address is assigned to the physical NIC hardware. 
A device can have multiple MAC addresses but only one primary IP address for each network interface.
HTTP methods and ports: 
	Specific HTTP methods are often associated with specific ports. 
For example, GET and POST requests for web pages typically use port 80 (HTTP) or 443 (HTTPS).




